<?php
// src/Persistence/FPersistentMAdmin.php

use Doctrine\ORM\EntityManagerInterface;

class FPersistentMAdmin
{
    private EntityManagerInterface $em;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->em = $entityManager;
    }

    /**
     * Retrieve an Admin by its primary key (ID)
     */
    public function retrieveById(int $id): ?Madmin
    {
        return $this->em->find(Madmin::class, $id);
    }

    /**
     * Retrieve an Admin by its unique email
     */
    public function retrieveByEmail(string $email): ?Madmin
    {
        return $this->em
            ->getRepository(Madmin::class)
            ->findOneBy(['email' => $email]);
    }

    /**
     * Create and persist a new Admin
     */
    public function create(string $email, string $rawPassword): bool
    {
        $admin = new Madmin();
        $admin->setEmail($email);
        $admin->setPassword(password_hash($rawPassword, PASSWORD_DEFAULT));

        try {
            $this->em->getConnection()->beginTransaction();
            $this->em->persist($admin);
            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR createAdmin: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Update an existing Admin
     */
    public function update(Madmin $admin): bool
    {
        try {
            $this->em->getConnection()->beginTransaction();

            $managed = $this->em->find(Madmin::class, $admin->getId());
            if (! $managed) {
                throw new \Exception("Admin not found");
            }

            // Copia i campi modificati
            $managed->setEmail($admin->getEmail());
            $managed->setPassword($admin->getPassword());

            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR updateAdmin: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete an Admin
     */
    public function delete(Madmin $admin): bool
    {
        try {
            $this->em->getConnection()->beginTransaction();
            $this->em->remove($admin);
            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR deleteAdmin: " . $e->getMessage());
            return false;
        }
    }
}



