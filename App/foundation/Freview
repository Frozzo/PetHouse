<?php
// src/Persistence/FPersistentMReview.php

use Doctrine\ORM\EntityManagerInterface;

class FPersistentMReview
{
    private EntityManagerInterface $em;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->em = $entityManager;
    }

    /**
     * Retrieve a Review by its primary key (ID)
     */
    public function retrieveById(int $id): ?Mreview
    {
        return $this->em->find(Mreview::class, $id);
    }

    /**
     * Retrieve all Reviews for a given offer
     */
    public function listByOffer(int $offerId): array
    {
        return $this->em
            ->getRepository(Mreview::class)
            ->findBy(['offer' => $offerId]);
    }

    /**
     * Create and persist a new Review
     */
    public function create(string $description, rating $rating, Muser $reviewer, Muser $reviewed, Moffer $offer): bool
    {
        $review = new Mreview($description, $rating, $reviewer, $reviewed, $offer);

        try {
            $this->em->getConnection()->beginTransaction();
            $this->em->persist($review);
            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR createReview: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Update an existing Review
     */
    public function update(Mreview $review): bool
    {
        try {
            $this->em->getConnection()->beginTransaction();

            $managed = $this->em->find(Mreview::class, $review->getId());
            if (! $managed) {
                throw new \Exception("Review not found");
            }

            // Copia i campi modificati
            $managed->setDescription($review->getDescription());
            $managed->setRating($review->getRating());
            // se vuoi anche cambiare reviewer, reviewed o offer, aggiungi qui:
            // $managed->setReviewer($review->getReviewer());
            // $managed->setReviewed($review->getReviewed());
            // $managed->setOffer($review->getOfferReviewed());

            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR updateReview: " . $e->getMessage());
            return false;
        }
    }

    /**
     * Delete a Review
     */
    public function delete(Mreview $review): bool
    {
        try {
            $this->em->getConnection()->beginTransaction();
            $this->em->remove($review);
            $this->em->flush();
            $this->em->getConnection()->commit();
            return true;
        } catch (\Exception $e) {
            $this->em->getConnection()->rollBack();
            error_log("ERROR deleteReview: " . $e->getMessage());
            return false;
        }
    }
}